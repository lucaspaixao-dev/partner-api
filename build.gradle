buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.3.0"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.13.1"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.3"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: "com.github.johnrengelman.shadow"

group 'com.github.lucasschwenke'
version '1.0.0'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    //ktor
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    compile "org.koin:koin-ktor:2.0.1"

    //db
    implementation "org.mongodb:mongo-java-driver:3.12.7"

    //geojson
    implementation "de.grundid.opendatalab:geojson-jackson:1.14"

    //ulid
    implementation "io.azam.ulidj:ulidj:1.0.0"

    //validations
    implementation "br.com.caelum.stella:caelum-stella-core:2.1.4"

    //tests
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"

    testCompile "io.mockk:mockk:1.9.3"

    testCompile "org.assertj:assertj-core:3.17.2"

    testCompile "de.bwaldvogel:mongo-java-server:1.35.0"
    testCompile "org.skyscreamer:jsonassert:1.5.0"

    //detekt
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.13.1"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-cli:1.13.1"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

detekt {
    failFast = true
    buildUponDefaultConfig = true
    config = files("default-detekt-config.yml")

    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = true
    }
}

tasks.detekt.dependsOn ktlintCheck

ktlint {
    verbose = true
}

test.dependsOn ktlintCheck

def ignorePackagesInJacocoReport = { classDirectories ->
    files(classDirectories.files.collect {
        fileTree(dir: it,
                exclude: [
                        'com/github/lucasschwenke/partnerapi/application/Application**',
                        'com/github/lucasschwenke/partnerapi/application/config/**',
                        'com/github/lucasschwenke/partnerapi/application/modules/**',
                        'com/github/lucasschwenke/partnerapi/application/web/extensions/PartnerRequestExtension**',
                        'com/github/lucasschwenke/partnerapi/application/web/requests/**',
                        'com/github/lucasschwenke/partnerapi/application/web/controllers/HealthCheckController**',
                        'com/github/lucasschwenke/partnerapi/application/web/responses/**',
                        'com/github/lucasschwenke/partnerapi/application/web/validations/**',
                        'com/github/lucasschwenke/partnerapi/domain/exception/**',
                        'com/github/lucasschwenke/partnerapi/domain/logger/**',
                        'com/github/lucasschwenke/partnerapi/domain/partner/**',
                        'com/github/lucasschwenke/partnerapi/domain/repositories/**',
                        'com/github/lucasschwenke/partnerapi/resources/**',
                ])
    })
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }

    afterEvaluate {
        classDirectories = ignorePackagesInJacocoReport(classDirectories)
    }
}

jacocoTestReport {
    reports.xml.enabled = true

    afterEvaluate {
        classDirectories = ignorePackagesInJacocoReport(classDirectories)
    }
}

test.finalizedBy jacocoTestReport
test.finalizedBy jacocoTestCoverageVerification

test {
    useJUnitPlatform()

    filter {
        includeTestsMatching "com.github.lucasschwenke.partnerapi.*"
    }

    testLogging {
        events "failed", "passed", "skipped"
        showExceptions = true
        exceptionFormat = "full"
        showCauses = true
    }
}

task componentTest(type: Test) {
    useJUnitPlatform()
    maxHeapSize "512m"
    failFast = true

    environment "MONGO_HOST", "TEST"
    environment "MONGO_AUTH_USER", "TEST"
    environment "MONGO_DATABASE", "TEST"
    environment "MONGO_AUTH_PASSWORD", 1234

    filter {
        includeTestsMatching "componentTests.*"
    }

    testLogging {
        events "failed", "passed", "skipped"
        showExceptions = true
        exceptionFormat = "full"
        showCauses = true
    }

    mustRunAfter test
}

test.finalizedBy componentTest

shadowJar {
    baseName = 'partner-application'
    classifier = null
    version = null
}
